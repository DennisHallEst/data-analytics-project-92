/* =====================================================================
   üìä REPORT 1: TOP 10 SELLERS BY TOTAL INCOME
   =====================================================================
   –¶–µ–ª—å:
     –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Å—è—Ç–∏ –ª—É—á—à–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–µ.

   –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:
     seller      ‚Äî –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
     operations  ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–ø—Ä–æ–¥–∞–∂)
     income      ‚Äî —Å—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è, –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –≤–Ω–∏–∑

   –õ–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:
     1Ô∏è‚É£ –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã sales, employees –∏ products:
         - sales —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞, –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–æ–≤–∞—Ä;
         - employees –¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ;
         - products –¥–∞—ë—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.
     2Ô∏è‚É£ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å—á–∏—Ç–∞–µ–º:
         - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ (COUNT);
         - –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É (SUM(price * quantity)).
     3Ô∏è‚É£ –û–∫—Ä—É–≥–ª—è–µ–º —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –≤–Ω–∏–∑ —Å –ø–æ–º–æ—â—å—é FLOOR().
     4Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—ã—Ä—É—á–∫–∏.
     5Ô∏è‚É£ –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π.
===================================================================== */

SELECT 
    CONCAT(e.first_name, ' ', e.last_name) AS seller,
    COUNT(s.sales_id) AS operations,
    FLOOR(SUM(p.price * s.quantity)) AS income
FROM sales s
JOIN employees e ON s.sales_person_id = e.employee_id
JOIN products p ON s.product_id = p.product_id
GROUP BY seller
ORDER BY income DESC
LIMIT 10;



/* =====================================================================
   üìä REPORT 2: SELLERS BELOW AVERAGE REVENUE PER DEAL
   =====================================================================
   –¶–µ–ª—å:
     –ù–∞–π—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —á—å—è —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ —Å–¥–µ–ª–∫—É –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–π
     –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º.

   –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:
     seller          ‚Äî –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
     average_income  ‚Äî —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ —Å–¥–µ–ª–∫—É, –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –≤–Ω–∏–∑

   –õ–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:
     1Ô∏è‚É£ –í –ø–æ–¥–∑–∞–ø—Ä–æ—Å–µ seller_avg —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –≤—ã—Ä—É—á–∫—É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞:
         AVG(price * quantity)
         –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ (FLOOR()).
     2Ô∏è‚É£ –í –ø–æ–¥–∑–∞–ø—Ä–æ—Å–µ overall_avg —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
         –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
     3Ô∏è‚É£ –í –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö
         average_income < –æ–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è.
     4Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∏.
===================================================================== */

WITH seller_avg AS (
    SELECT 
        CONCAT(e.first_name, ' ', e.last_name) AS seller,
        FLOOR(AVG(p.price * s.quantity)) AS average_income
    FROM sales s
    JOIN employees e ON s.sales_person_id = e.employee_id
    JOIN products p ON s.product_id = p.product_id
    GROUP BY seller
),
overall_avg AS (
    SELECT AVG(average_income) AS avg_all FROM seller_avg
)
SELECT 
    sa.seller,
    sa.average_income
FROM seller_avg sa, overall_avg oa
WHERE sa.average_income < oa.avg_all
ORDER BY sa.average_income ASC;



/* =====================================================================
   üìä REPORT 3: REVENUE BY DAY OF WEEK
   =====================================================================
   –¶–µ–ª—å:
     –ü–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã—Ä—É—á–∫–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.

   –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:
     seller       ‚Äî –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
     day_of_week  ‚Äî –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
     income       ‚Äî —Å—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è –≤–Ω–∏–∑

   –õ–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:
     1Ô∏è‚É£ –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã sales, employees –∏ products.
     2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º TO_CHAR(s.sale_date, 'day'), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
         –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'monday', 'tuesday' –∏ —Ç.–¥.).
     3Ô∏è‚É£ –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –Ω–∞–∑–≤–∞–Ω–∏—è (TRIM).
     4Ô∏è‚É£ –°—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—É—é –≤—ã—Ä—É—á–∫—É (SUM(price * quantity)) –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑.
     5Ô∏è‚É£ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥–∞–≤—Ü—É –∏ –¥–Ω—é –Ω–µ–¥–µ–ª–∏.
     6Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä—É–µ–º:
         - –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (EXTRACT(ISODOW): 1=Monday ... 7=Sunday),
         - –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞.
===================================================================== */

SELECT 
    CONCAT(e.first_name, ' ', e.last_name) AS seller,
    TRIM(TO_CHAR(s.sale_date, 'day')) AS day_of_week,
    FLOOR(SUM(p.price * s.quantity)) AS income
FROM sales s
JOIN employees e ON s.sales_person_id = e.employee_id
JOIN products p ON s.product_id = p.product_id
GROUP BY seller, TRIM(TO_CHAR(s.sale_date, 'day')), EXTRACT(ISODOW FROM s.sale_date)
ORDER BY EXTRACT(ISODOW FROM s.sale_date), seller;


=====================================================================
   REPORT 4: CUSTOMERS BY AGE GROUP
   =====================================================================
   Goal:
   - Count how many customers fall into each age range:
       ‚Ä¢ 16‚Äì25
       ‚Ä¢ 26‚Äì40
       ‚Ä¢ 40+
   - The table must contain:
       age_category ‚Äî age range
       age_count ‚Äî number of customers in that group
   - Sort order: by age category in natural order (16‚Äì25, 26‚Äì40, 40+)
   ---------------------------------------------------------------------
   Explanation:
   - We use a CASE expression to classify each customer‚Äôs age.
   - Then group by that category and count how many customers belong to it.
   - ORDER BY uses CASE to maintain the desired category order.
   ===================================================================== */

WITH age_groups AS (
    SELECT
        CASE 
            WHEN c.age BETWEEN 16 AND 25 THEN '16-25'
            WHEN c.age BETWEEN 26 AND 40 THEN '26-40'
            WHEN c.age > 40 THEN '40+'
        END AS age_category
    FROM customers c
)
SELECT 
    age_category,
    COUNT(*) AS age_count
FROM age_groups
GROUP BY age_category
ORDER BY 
    CASE 
        WHEN age_category = '16-25' THEN 1
        WHEN age_category = '26-40' THEN 2
        WHEN age_category = '40+' THEN 3
    END;



/* =====================================================================
   REPORT 5: UNIQUE CUSTOMERS AND TOTAL INCOME BY MONTH
   =====================================================================
   Goal:
   - For each month (YYYY-MM format):
       ‚Ä¢ Count unique customers who made purchases.
       ‚Ä¢ Calculate total income (sum of price * quantity).
   - Round down the total income to whole numbers.
   - Sort by month ascending.
   ---------------------------------------------------------------------
   Explanation:
   - We join sales with products to get prices.
   - TO_CHAR formats the sale date to ‚ÄúYYYY-MM‚Äù.
   - COUNT(DISTINCT customer_id) ensures unique customer count per month.
   - FLOOR(SUM(...)) removes decimal parts from income.
   ===================================================================== */

SELECT 
    TO_CHAR(s.sale_date, 'YYYY-MM') AS selling_month,
    COUNT(DISTINCT s.customer_id) AS total_customers,
    FLOOR(SUM(p.price * s.quantity)) AS income
FROM sales s
JOIN products p 
    ON s.product_id = p.product_id
WHERE s.sale_date IS NOT NULL
GROUP BY TO_CHAR(s.sale_date, 'YYYY-MM')
ORDER BY selling_month;



/* =====================================================================
   REPORT 6: CUSTOMERS WHOSE FIRST PURCHASE WAS PROMOTIONAL (PRICE = 0)
   =====================================================================
   Goal:
   - Identify customers whose very first purchase was part of a promotion
     (i.e. total sale price = 0).
   - Output:
       customer ‚Äî full name of customer
       sale_date ‚Äî date of first purchase
       seller ‚Äî full name of the employee (salesperson)
   - Sort by customer_id.
   ---------------------------------------------------------------------
   Explanation:
   - Step 1: Find each customer‚Äôs first-ever purchase date (MIN(sale_date)).
   - Step 2: Join back to the sales table to get details of that transaction.
   - Step 3: Join products to verify that sale was promotional (price * quantity = 0).
   - Step 4: Output only customers meeting that condition.
   - Step 5: Sort by customer_id.
   ===================================================================== */

WITH first_purchase AS (
    SELECT 
        customer_id,
        MIN(sale_date) AS first_sale_date
    FROM sales
    GROUP BY customer_id
)
SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS customer,
    s.sale_date,
    CONCAT(e.first_name, ' ', e.last_name) AS seller
FROM first_purchase fp
JOIN sales s 
    ON s.customer_id = fp.customer_id 
   AND s.sale_date = fp.first_sale_date
JOIN products p 
    ON s.product_id = p.product_id
JOIN customers c 
    ON s.customer_id = c.customer_id
JOIN employees e 
    ON s.sales_person_id = e.employee_id
WHERE (p.price * s.quantity) = 0
ORDER BY s.customer_id;
